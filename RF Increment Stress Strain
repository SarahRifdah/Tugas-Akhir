library(dplyr)
library(ggplot2)
library(tidyr)

# Cleaning data
data_awal <- slice(RUN_R, -c(2030:2031)) # menghapus data di line 2030 dan 2031

# Membuat Subset Data Baru
data_inc <- data_awal %>%
  group_by (Sampel) %>%
  mutate (Strain_prev = lag(Strain, default = 0),     # Strain sebelumnya
          Stress_prev = lag(Stress, default = 0),     # Stress sebelumnya
          DelSt = Strain - lag(Strain, default = 0))  # Delta Strain

# Plot data baru
ggplot(data_inc) +
  geom_line(aes(x = Strain, y = Stress, color = Conf, group = Sampel)) +
  labs(title = "Data Triaxial CU",x = "Strain (%)", y = "Stress (kPa)")

# Distribusi dan persebaran data
ggplot(data_inc %>% 
         melt(id.vars = NULL),
       aes(x = value)) +
  geom_histogram(fill = "dodgerblue", color = "black") +
  facet_wrap(~variable, scales = "free") +
  labs(title = "Histograms Distribusi Data")

# Splitting data training dan testing
# Menghitung jumlah baris unik dalam dataframe
jenis_sampel_inc <- length(unique(data_inc$Sampel))

# Menentukan jumlah data training yang diinginkan (70% dari total data)
training_inc_rf <- round(0.7 * jenis_sampel_inc)

# Menetapkan seed untuk reproduktibilitas hasil acak
set.seed(123)

# Menghasilkan indeks acak untuk pemisahan data training dan testing
indeks_Inc <- sample(1:jenis_sampel_inc)

# Memisahkan data menjadi data training dan testing berdasarkan indeks acak
train_rf_inc<- data_inc[data_inc$Sampel %in% 
                           unique(data_inc$Sampel)
                         [indeks_Inc[1:training_inc_rf]], ]
test_rf_inc <- data_inc[data_inc$Sampel %in% 
                          unique(data_inc$Sampel)
                        [indeks_Inc[(training_inc_rf + 1):jenis_sampel_inc]], ]

# Membuat plot data training
plot_rf_inc <- ggplot(train_rf_inc, aes(
  x = Strain, 
  y = Stress,
  color = "Data Train", 
  group = Sampel)) +
  geom_line(size = 1) +
  labs(
    x = "Strain(%)", 
    y = "Stress(kPa)",
    title = "Plot Data Train dan Test") +
  scale_color_manual(
    values = c("Data Train" = "dodgerblue"), 
    name = "Data Type")

# Menambahkan plot data testing ke dalam plot data training
plot_kombinasi <- plot_rf_inc +
  geom_line(data = test_rf_inc, aes(
    x = Strain, 
    y = Stress,
    color = "Data Test", 
    group = Sampel), 
    size = 1) +
  scale_color_manual(
    values = c("Data Train" = "dodgerblue", "Data Test" = "deeppink"))

# Menampilkan plot yang telah digabungkan
print(plot_kombinasi)

# Training Random Forest model increment stress strain
library(ranger)
rf_inc <- ranger(Stress ~ Strain + Conf + e0 + Gs + PL + LL + Cc + 
                   Sr + PI + ﾏ知 + Cc + Strain_prev + Stress_prev + DelSt,
                 train_rf_inc,
                 num.trees = 500,
                 splitrule = "extratrees", 
                 importance = "impurity")
rf_inc

# Inisialisasi kolom prediksi stress
test_rf_inc$Stress_rf <- 0

# Melakukan prediksi untuk setiap langkah
for (i in 1:nrow(test_rf_inc)) {
  if (test_rf_inc$Strain[i] == 0) {
    # Untuk langkah pertama, prediksi berdasarkan nilai strain = 0
    Stress_rf <- predict(rf_inc, data = test_rf_inc[i, ])
  } else {
    # Prediksi stress berdasarkan nilai strain dan prediksi stress sebelumnya
    Stress_rf <- predict(rf_inc, data = data.frame (
      Stress_prev = test_rf_inc$Stress_rf[i - 1],
      test_rf_inc[i, !(names(test_rf_inc) %in% "Stress_prev")]))
  }

  test_rf_inc$Stress_rf[i] <- Stress_rf$predictions
}

# Cek nilai RMSE RF Model
RMSE_rf_Inc <- sqrt(mean(with(test_rf_inc, (Stress - Stress_rf)^2)))

# Cek nilai MAE OLS Model
MAE_rf_Inc <- mean(abs(with(test_rf_inc, (Stress-Stress_rf))))

# Dataset berisi strain, stress, stress prediksi, dan error
data_rf <- test_rf_inc %>%
  mutate(Error = Stress - Stress_rf) %>%
  select(Sampel, Strain, Stress, Stress_rf, Error)

# Buat 1:1
ggplot(data_rf, aes(x = Stress, y = Stress_rf)) +
  geom_point() + # Menambahkan titik-titik
  geom_abline(
    intercept = 0, 
    slope = 1, 
    color = "red", 
    linetype = "dashed") + # Menambahkan garis 1:1
  labs(x = "Stress (kPa)", y = "Predicted Stress (kPa)") + 
  ggtitle("Plot Predicted Stress vs Stress RF Increment") +
  geom_text(
    x = 20, 
    y = 110,
    label = paste("RMSE:", round(RMSE_rf_Inc, 2), "\n", 
                  "MAE:", round(MAE_rf_Inc, 2)),
    hjust = 1, 
    vjust = 0, 
    color = "black", 
    size = 4)

# Plot strain vs predicted RF model
ggplot(data_rf, aes(x = Strain, y = Stress, group = Sampel)) +
  geom_point() + # Tambahkan titik data
  geom_line(aes(y = Stress_rf), color = "blue") + # Tambahkan garis regresi
  labs(
    title = "Plot Hasil Random Forest Increment", 
    x = "Strain (%)", 
    y = "Stress (kPa)") +
  theme_minimal() +
  annotate(
    "text",
    x = 11, 
    y = c(0, 11),  # Mengatur posisi y untuk kedua teks
    label = c(paste("RMSE:", round(RMSE_rf_Inc, 2)),
              paste("MAE:", round(MAE_rf_Inc, 2))),
    hjust = 1,
    vjust = c(1, 0.9), 
    color = "black")

#### Cek variabel importance Random Forest####
gini_impurity <- ranger::importance(rf_inc) # Metode Gini Impurity

# Membuat data frame untuk variabel importance Gini impurity
gini_impurity_df <- data.frame(
  Feature = names(gini_impurity),
  Importance_feature = gini_impurity)

# Membuat bar plot
ggplot(
  gini_impurity_df,
  aes(x = reorder(Feature, Importance_feature), y = Importance_feature)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(
    x = "Fitur", y = "Importance Gini Impurity",
    title = "Variabel Importance Gini Impurity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Model RF untuk feature importance permutation
permutation_Inc <- ranger( Stress ~ Strain + Conf + e0 + Gs + PL + LL + Cc + Sr + 
                             PI + ﾏ知 + Cc + Strain_prev + Stress_prev + DelSt,
                           train_rf_inc,
                           num.trees = 500,
                           splitrule = "extratrees", 
                           importance = "permutation")

permutation <- ranger::importance(permutation_Inc) 

# Membuat data frame untuk variabel importance Permutation
permutation_df <- data.frame(
  Feature = names(permutation),
  permu_feature = permutation)

# Membuat bar plot
ggplot(
  permutation_df,
  aes(x = reorder(Feature, permu_feature), y = permu_feature)) +
  geom_bar(stat = "identity", fill = "purple") +
  labs(
    x = "Fitur", y = "Importance Permutation",
    title = "Variabel Importance Permutation") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

###### Pemodelan Kurva Stress Strain ########

# Membuat dataset baru
dataset_rf <- data.frame(
  Strain = seq(0, 10, by = 0.5), # Nilai strain 0-10% interval 0,5
  Stress = 0,                    # Kolom stress initial data 0
  Conf = mean(data_inc$Conf),    # Parameter tanah rata-rata seluruh sampel
  e0 = mean(data_inc$e0),
  Gs = mean(data_inc$Gs),
  PL = mean(data_inc$PL),
  LL = mean(data_inc$LL),
  PI = mean(data_inc$PI),
  Cc = mean(data_inc$Cc),
  Sr = mean(data_inc$Sr),
  ﾏ知 = mean(data_inc$ﾏ知),
  DelSt = 0.5)

# Prediksi nilai stress dengan for loop algoritma RF
for (i in 2:nrow(dataset_rf)) { # Dimulai dari baris ke 2
  dataset_rf <- dataset_rf %>%
    mutate(
      Strain_prev = lag(Strain, default = 0),                
      Stress_prev = lag(Stress, default = 0)) 
  Stress <- predict(rf_inc, data = dataset_rf [i, ])
  
  dataset_rf$Stress[i] <- Stress$predictions
}

# Plot hasil prediksi stress vs strain
ggplot(dataset_rf) +
  geom_line(aes(x = Strain, y = Stress)) +
  labs(
    title = "Data Triaxial CU Model RF Increment",
    x = "Strain (%)", y = "Stress (kPa)")
